package au.com.deepus;

import au.com.deepus.mapper.SudokuMapper;
import au.com.deepus.solver.SudokuSolver;
import au.com.deepus.solver.SudokuSolverMain;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class MainTest {

    private final String SAMPLE_ONE_MISSING = "794350268532648719816279435127495683348716592965823147273964851481532976659187324";
    private final String SAMPLE_ONE_MISSING_SOL = "794351268532648719816279435127495683348716592965823147273964851481532976659187324";

    private final String SAMPLE_TWO_MISSING = "794351200532648719816279435127495683348716592965823147273964851481532976659187324";
    private final String SAMPLE_TWO_MISSING_SOL = "794351268532648719816279435127495683348716592965823147273964851481532976659187324";

    private final String SAMPLE_3_MISSING = "794351268532648719816279435127495683348716592965823147273964000481532000659187000";
    private final String SAMPLE_3_MISSING_SOL = "794351268532648719816279435127495683348716592965823147273964851481532976659187324";

    /**
     * 18th October Sudoku.com.au
     **/
    private final String SAMPLE_EASY_1 = "004351200502600709800200030100400080308000502060003007070004001401002906009187300";
    private final String SAMPLE_EASY_1_SOL = "794351268532648719816279435127495683348716592965823147273964851481532976659187324";

    private final String SAMPLE_EASY_2 = "007006020600457001980003056002001040560000072090700300830600014700924008040100900";
    private final String SAMPLE_EASY_2_SOL = "157896423623457891984213756372581649568349172491762385839675214716924538245138967";

    private final String SAMPLE_EASY_3 = "170830000806000530902070040400006800067502910009700003010020709053000401000058062";
    private final String SAMPLE_EASY_3_SOL = "175834296846219537932675148421396875367582914589741623618423759253967481794158362";

    private final String SAMPLE_MEDIUM_1 = "630000059008350014000060000049006000006000900000400860000030000890012700310000026";
    private final String SAMPLE_MEDIUM_1_SOL = "637841259928357614451269387249186573586723941173495862762534198894612735315978426";

    private final String SAMPLE_MEDIUM_2 = "504000903700000008003209600060472090000000000070158030001306500600000009409000801";
    private final String SAMPLE_MEDIUM_2_SOL = "524687913796531248813249657368472195145963782972158436281396574657814329439725861";

    private final String SAMPLE_MEDIUM_3 = "704000103830000076000603000001702300000405000006809200000501000910000054308000609";
    private final String SAMPLE_MEDIUM_3_SOL = "764958123839124576125673498491762385283415967576839241647591832912386754358247619";

    private final String SAMPLE_HARD_1 = "004600000600020003590300600000009078003000200850400000007005014900060002000001900";
    private final String SAMPLE_HARD_1_SOL = "734658129618927543592314687126539478473186295859472361367295814941863752285741936";

    private final String SAMPLE_HARD_2 = "500006380080050900401000002000700028000000000160008000300000204009070010052400006";
    private final String SAMPLE_HARD_2_SOL = "527946381683251947491387652935764128278139465164528739316895274849672513752413896";

    final SudokuMapper sudokuMapper = new SudokuMapper();
    final SudokuSolver solver = new SudokuSolverMain();

    @Test
    void runRedundancyTests() {
        compareGrids(SAMPLE_ONE_MISSING, SAMPLE_ONE_MISSING_SOL);
        compareGrids(SAMPLE_TWO_MISSING, SAMPLE_TWO_MISSING_SOL);
        compareGrids(SAMPLE_3_MISSING, SAMPLE_3_MISSING_SOL);
    }

    @Test
    void runEasy1SudokuTest() {
        compareGrids(SAMPLE_EASY_1, SAMPLE_EASY_1_SOL);
    }

    @Test
    void runEasy2SudokuTest() {
        compareGrids(SAMPLE_EASY_2, SAMPLE_EASY_2_SOL);
    }

    @Test
    void runEasy3SudokuTest() {
        compareGrids(SAMPLE_EASY_3, SAMPLE_EASY_3_SOL);
    }

    @Test
    void runMedium1SudokuTest() {
        compareGrids(SAMPLE_MEDIUM_1, SAMPLE_MEDIUM_1_SOL);
    }

    @Test
    void runMedium2SudokuTest() {
        compareGrids(SAMPLE_MEDIUM_2, SAMPLE_MEDIUM_2_SOL);
    }

    @Test
    void runMedium3SudokuTest() {
        compareGrids(SAMPLE_MEDIUM_3, SAMPLE_MEDIUM_3_SOL);
    }

    @Test
    void runHard1SudokuTests() {
        compareGrids(SAMPLE_HARD_1, SAMPLE_HARD_1_SOL);
    }

    @Test
    void runHard2SudokuTests() {
        compareGrids(SAMPLE_HARD_2, SAMPLE_HARD_2_SOL);
    }

    void compareGrids(String unsolved, String solved) {
        var unsolvedGrid = sudokuMapper.map(unsolved);
        var solvedGrid = sudokuMapper.map(solved);
        System.out.println(unsolvedGrid);

        var attemptSolve = solver.solve(unsolvedGrid);
        if (!attemptSolve.isSolved()) {
            System.out.println(attemptSolve);
        }
        assertTrue(attemptSolve.isSolved());
        assertEquals(attemptSolve, solvedGrid);
    }
}
